@page "/encomendar"
@using LI4.Data.Models
@using LI4.Data.Services
@using LI4.Auth
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject StockService StockService
@inject OrderService OrderService
@inject AuthProvider AuthenticationStateProvider
@inject ProtectedSessionStorage sessionStorage
<link rel="stylesheet" href="css/Encomendar.css" />

<div class="menu-cliente-container">
    <div class="container">
        <h4>ID do Cliente: @clienteId</h4>
        <div class="products-container">
            @foreach (var produto in produtos)
            {
                <div class="product-card">
                    <div class="product-info">
                        <h3>@produto.Nome</h3>
                        <p><b>Descrição:</b> @produto.Descricao</p>
                        <p><b>Tipo dos materiais:</b> @GetMateriais(produto.Nome)</p>
                        <p><b>Preço:</b> @produto.Preco €</p>
                        <p><b>Disponível:</b> @produto.Quantidade unidades</p>
                        <input type="number" min="0" class="input-quantidade" placeholder="0"
                               @bind="produtoQuantidade[produto.Id]"
                               @oninput="(e) => AtualizarQuantidade(produto.Id, e.Value.ToString())" />
                        <label>Unidades</label>
                    </div>
                    <div class="product-image">
                        <img src="assets/casas/@GetImageName(produto.Nome)" alt="@produto.Nome" />
                    </div>
                </div>
            }
        </div>
    </div>
    <div style="text-align:center; margin-top: 20px;">
        <button class="botao cancelar" @onclick="Cancelar">Cancelar</button>
        <button class="botao pagar" @onclick="CriarEncomenda">Pagar</button>
    </div>
</div>

@code {
    private List<Produto> produtos = new List<Produto>();
    private Dictionary<int, int> produtoQuantidade = new Dictionary<int, int>(); // Armazena a quantidade de cada produto
    private int clienteId;

    protected override async Task OnInitializedAsync()
    {
        produtos = await StockService.ListarProdutosEmStockAsync();

        foreach (var produto in produtos)
        {
            if (!produtoQuantidade.ContainsKey(produto.Id))
            {
                produtoQuantidade[produto.Id] = 0; // Define a quantidade inicial como 0
            }
        }
        var ourProvider = (AuthProvider)AuthenticationStateProvider;
        var authState = await ourProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            clienteId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "0");
        }
        else
        {
            clienteId = 0; // não autenticado
        }
    }

    private void AtualizarQuantidade(int produtoId, string value)
    {
        if (int.TryParse(value, out int quantidade))
        {
            produtoQuantidade[produtoId] = quantidade;
        }
        else
        {
            produtoQuantidade[produtoId] = 0;
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/menucliente");
    }

    private async Task CriarEncomenda()
    {
        try
        {
            var produtosEncomendados = new List<(Produto, int)>();

            foreach (var produto in produtos)
            {
                if (produtoQuantidade.ContainsKey(produto.Id) && produtoQuantidade[produto.Id] > 0)
                {
                    produtosEncomendados.Add((produto, produtoQuantidade[produto.Id]));
                    Console.WriteLine($"Produto: {produto.Nome}, Quantidade: {produtoQuantidade[produto.Id]}");
                }
            }

            if (produtosEncomendados.Any())
            {
                var encomenda = await OrderService.CriarEncomendaAsync(clienteId, produtosEncomendados);
                if (encomenda != null && encomenda.Numero > 0)
                {
                    await sessionStorage.SetAsync("Encomenda", encomenda);
                    NavigationManager.NavigateTo($"/pagamento/{encomenda.Numero}");
                }
                else
                {
                    Console.WriteLine("Falha ao criar a encomenda.");
                }
            }
            else
            {
                Console.WriteLine("Por favor, selecione pelo menos um produto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao criar encomenda: {ex.Message}");
        }
    }

    private string GetImageName(string nomeProduto)
    {
        switch (nomeProduto)
        {
            case "Produto 1":
                return "casa1.png";
            case "Produto 2":
                return "casa2.png";
            case "Produto 3":
                return "casa3.png";
            default:
                return "default.png";
        }
    }

    private string GetMateriais(string nomeProduto)
    {
        switch (nomeProduto)
        {
            case "Produto 1":
                return "Madeira Pinho e Acácia";
            case "Produto 2":
                return "Madeira Acácia e Wenge";
            case "Produto 3":
                return "Madeira Acácia e Rosewood";
            default:
                return "Material desconhecido";
        }
    }
}

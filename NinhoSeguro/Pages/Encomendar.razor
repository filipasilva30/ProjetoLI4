@page "/encomendar"
@using LI4.Data.Models
@using LI4.Data.Services
@using LI4.Auth
@using System.Security.Claims;
@inject NavigationManager NavigationManager
@inject StockService StockService
@inject OrderService OrderService
@inject AuthProvider AuthenticationStateProvider

<link rel="stylesheet" href="css/Encomendar.css" />

<div class="menu-cliente-container">
    <div class="container">  
        <h4>ID do Cliente: @clienteId</h4>
        <div class="products-container">
            @foreach (var produto in produtos)
            {
                <div class="product-card">
                    <div class="product-info">
                        <h3>@produto.Nome</h3>
                        <p><b>Descrição:</b> @produto.Descricao</p>
                        <p><b>Tipo dos materiais:</b> @GetMateriais(produto.Nome)</p>
                        <p><b>Preço:</b> @produto.Preco €</p>
                        <p><b>Disponível:</b> @produto.Quantidade unidades</p>
                        <input type="number" min="0" class="input-quantidade" placeholder="0" />
                        <label>Unidades</label>
                    </div>
                    <div class="product-image">
                        <img src="assets/casas/@GetImageName(produto.Nome)" alt="@produto.Nome" />
                    </div>
                </div>
            }
        </div>
    </div>
    <div style="text-align:center; margin-top: 20px;">
        <button class="botao cancelar" @onclick="Cancelar">Cancelar</button>
        <button class="botao pagar">Pagar</button>
    </div>
</div>

@code {
    private List<Produto> produtos = new List<Produto>();
    private Dictionary<int, int> produtoQuantidade = new Dictionary<int, int>(); // Armazena a quantidade de cada produto
    private int clienteId; 

    protected override async Task OnInitializedAsync()
    {
        produtos = await StockService.ListarProdutosEmStockAsync();

        var ourProvider = (AuthProvider)AuthenticationStateProvider;
        var authState = await ourProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            clienteId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "0");
        }
        else
        {
            clienteId = 0; // não autenticado
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/menucliente");
    }

    private async Task CriarEncomenda()
    {
        var produtosEncomendados = produtos
            .Where(p => produtoQuantidade.ContainsKey(p.Id) && produtoQuantidade[p.Id] > 0) 
            .Select(p => (p, produtoQuantidade[p.Id])) 
            .ToList();

        if (produtosEncomendados.Any())
        {
            var encomenda = await OrderService.CriarEncomendaAsync(clienteId, produtosEncomendados);

            NavigationManager.NavigateTo("/pagamento");
        }
        else
        {
            // Exibir mensagem de erro se nenhum produto foi selecionado
        }
    }

    private string GetImageName(string nomeProduto)
    {
        switch (nomeProduto)
        {
            case "Produto 1":
                return "casaS.png"; 
            case "Produto 2":
                return "casaM.png"; 
            case "Produto 3":
                return "casaL.png"; 
            default:
                return "default.png"; 
        }
    }

    private string GetMateriais(string nomeProduto)
    {
        switch (nomeProduto)
        {
            case "Produto 1":
                return "Madeira Pinho e Acácia"; 
            case "Produto 2":
                return "Madeira Acácia e Wenge"; 
            case "Produto 3":
                return "Madeira Acácia e Rosewood"; 
            default:
                return "Material desconhecido"; 
        }
    }
}
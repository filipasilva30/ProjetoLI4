@page "/encomenda/{id:int}"
@using LI4.Data.Models
@inject NavigationManager NavigationManager
@inject LI4.Data.Services.OrderService OrderService
@inject LI4.Data.Services.ProductionService ProductionService

<link rel="stylesheet" href="css/EncomendaId.css" />

<div class="encomenda-container">
    <div class="header">
        <h1 class="titulo">ENCOMENDA #@id</h1>
        <p class="cliente-info">Cliente: <b>@clienteNome</b></p>
    </div>

    <div class="encomenda-info">
        <p>Data prevista de entrega: <b>@dataPrevista</b></p>
        <p>Estado atual: <em>@estadoAtual</em></p>
    </div>

    @if (estadoAtual == "Em espera")
    {
        <div class="produzir-container">
            <button @onclick="VerificarMateriais">Verificar Materiais</button>
        </div>
    }

    @if (verificacaoConcluida)
    {
        @if (podeProduzir)
        {
            <div class="produzir-container">
                <button @onclick="ProduzirTodos">Produzir Todos os Produtos</button>
            </div>
        }
        else
        {
            <p style="color: red;">@mensagemErro</p>
        }
    }

    <div class="produtos-list">
        @foreach (var produto in produtos)
        {
            <div class="produto-item">
                <div class="produto-info">
                    <h3 class="produto-nome">@produto.Nome</h3>
                    <p>Quantidade encomendada: <b>@produto.QuantidadeEncomendada</b></p>
                    <p>Estado: <b>@produto.Estado</b></p>
                    <div class="produto-actions">
                        @if (produto.Estado == "Em produção")
                        {
                            <button @onclick="() => VerLinhaDeMontagem(produto.Id)">Ver Linha de Montagem</button>
                        }
                        else if (produto.Estado == "Em espera")
                        {
                        }
                        else if (produto.Estado == "Entregue")
                        {
                            <span>Produto Entregue</span>
                        }
                    </div>
                </div>
                <div class="produto-image">
                    <img src="@produto.ImagemUrl" alt="@produto.Nome" />
                </div>
            </div>
        }
    </div>

    <div class="nav-buttons">
        <button @onclick="Voltar">VOLTAR</button>
    </div>
</div>


@code {
    [Parameter] public int id { get; set; }
    private string dataPrevista;
    private string estadoAtual;
    private string clienteNome;
    private List<Produto> produtos = new List<Produto>();
    private bool verificacaoConcluida = false;
    private bool podeProduzir = false;
    private string mensagemErro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obter a encomenda com os produtos
            var encomenda = await OrderService.ListarTodasEncomendasAsync();
            var encomendaSelecionada = encomenda.FirstOrDefault(e => e.Numero == id);

            if (encomendaSelecionada != null)
            {
                clienteNome = encomendaSelecionada.IdCliente;  // Atualizado para string
                // Alterado para "Data prevista de entrega"
                dataPrevista = encomendaSelecionada.DataPrevEntrega.ToString("dd/MM/yyyy");
                estadoAtual = encomendaSelecionada.Estado;

                // Obter os produtos associados à encomenda
                var produtosDb = await OrderService.ListarProdutosPorEncomendaAsync(id);
                produtos = produtosDb.Select(p => new Produto
                {
                    Id = p.Id,
                    Nome = p.Nome,
                    QuantidadeEncomendada = p.Quantidade,
                    QuantidadeDisponivel = p.Preco, // Ajuste para quantidade disponível, se necessário
                    ImagemUrl = $"assets/casas/casa{p.Id}.png", // Ajuste conforme necessário
                    Estado = encomendaSelecionada.Estado // Propagar o estado da encomenda
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar encomenda: {ex.Message}");
        }
    }

    private async Task VerificarMateriais()
    {
        var resultado = await ProductionService.VerificarMateriaisParaProducaoAsync(id);
        verificacaoConcluida = true;
        podeProduzir = resultado.PodeProduzir;
        mensagemErro = resultado.Mensagem;
    }

    private async Task ProduzirTodos()
    {
        // Alterar o estado de todos os produtos para "Em produção"
        foreach (var produto in produtos)
        {
            if (produto.Estado == "Em espera")
            {
                produto.Estado = "Em produção"; // Alterar o estado para "Em produção"
            }
        }
        estadoAtual = "Em produção"; // Alterar o estado da encomenda também

        // Atualizar o estado da encomenda na base de dados
        var resultado = await OrderService.AtualizarEstadoEncomendaAsync(id, "Em produção");
        if (resultado == "Estado da encomenda atualizado com sucesso!")
        {
            Console.WriteLine("Todos os produtos foram alterados para 'Em produção'.");
        }
        else
        {
            Console.WriteLine("Erro ao atualizar o estado da encomenda.");
        }
    }

    private async Task EnviarEncomenda()
    {
        // Alterar o estado de todos os produtos para "Entregue"
        foreach (var produto in produtos)
        {
            if (produto.Estado == "Em produção")
            {
                produto.Estado = "Entregue"; // Alterar o estado do produto para "Entregue"
            }
        }
        estadoAtual = "Entregue"; // Alterar o estado da encomenda para "Entregue"

        // Atualizar o estado da encomenda e dos produtos na base de dados
        var resultadoEncomenda = await OrderService.AtualizarEstadoEncomendaAsync(id, "Entregue");
        if (resultadoEncomenda == "Estado da encomenda atualizado com sucesso!")
        {
            Console.WriteLine("Todos os produtos foram alterados para 'Entregue'.");
        }
        else
        {
            Console.WriteLine("Erro ao atualizar o estado da encomenda.");
        }
    }

    private void VerLinhaDeMontagem(int produtoId)
    {
        // Redireciona para a página de linha de montagem com o id do produto
        NavigationManager.NavigateTo($"/linhademontagem/{produtoId}");
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/encomendas");
    }

    private void EnviarNotificacao()
    {
        Console.WriteLine("Notificação enviada!");
    }

    private class Produto
    {
        public int Id { get; set; }
        public string Nome { get; set; }
        public int QuantidadeEncomendada { get; set; }
        public decimal QuantidadeDisponivel { get; set; } // Removido da exibição
        public string ImagemUrl { get; set; }
        public string Estado { get; set; } // Estado do produto (Em espera, Em produção, Entregue)
    }
}
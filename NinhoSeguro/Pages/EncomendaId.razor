@page "/encomenda/{id:int}"
@using LI4.Data.Models
@inject NavigationManager NavigationManager
@inject LI4.Data.Services.OrderService OrderService
@inject LI4.Data.Services.StockService StockService
@inject LI4.Data.Services.ProductionService ProductionService

<link rel="stylesheet" href="css/EncomendaId.css" />

<div class="encomenda-container">
    <div class="header">
        <h2 class="left">Encomenda #@id</h2>
        <h3 class="right">Cliente: @clienteNome</h3>
    </div>

    <div class="encomenda-info">
        <p>Data prevista de entrega: <b>@dataPrevista</b></p>
        <p>Estado atual: <em>@estadoAtual</em></p>
    </div>

    @* Só mostra o botão se a encomenda estiver em espera e ainda não foi feita a verificação *@
    @if (estadoAtual == "Em espera" && !verificacaoConcluida)
    {
        <div class="produzir-container">
            <button @onclick="ConfirmarStockDisponivel">Confirmar Stock disponível</button>
        </div>
    }

    @* Só mostra a secção de verificação se a encomenda continuar em espera depois da verificação *@
    @if (verificacaoConcluida && estadoAtual == "Em espera")
    {
        @if (temCasasEmStock)
        {
            <div class="produzir-container">
                <button @onclick="EnviarEncomenda">Enviar Encomenda</button>
            </div>
            <ul class="produtos-disponiveis">
                @foreach (var produto in casasDisponiveis)
                {
                    <li>Casa @produto.Key: Disponível em stock (@produto.Value unidade(s))</li>
                }
            </ul>
        }
        else if (podeProduzir)
        {
            <div class="produzir-container">
                <button @onclick="ProduzirTodos">Produzir Todos os Produtos</button>
            </div>
            <ul class="produtos-produziveis">
                @foreach (var produto in produtosProduziveis)
                {
                    <li>Produto @produto.Key: Pode produzir @produto.Value unidade(s)</li>
                }
            </ul>
        }
        else
        {
            <p class="mensagem-erro">@mensagemErro</p>
        }
    }

    <div class="produtos-list">
        @foreach (var produtoEncomenda in produtosEncomenda)
        {
            var nomeProduto = nomesProdutos.ContainsKey(produtoEncomenda.IdProduto)
                ? nomesProdutos[produtoEncomenda.IdProduto]
                : "Desconhecido";

            <div class="produto-item">
                <div class="produto-info">
                    <h3 class="produto-nome">@nomeProduto</h3>
                    <p>Quantidade encomendada: <b>@produtoEncomenda.Quantidade</b></p>
                    <div class="produto-actions">
                        @if (estadoAtual == "Em produção")
                        {
                            <div class="produto-actions">
                                <button @onclick="() => VerLinhaDeMontagem(produtoEncomenda.IdProduto)">Ver Linha de Montagem</button>
                            </div>
                        }
                        else if (estadoAtual == "Entregue")
                        {
                            <span>Produto Entregue</span>
                        }
                    </div>
                </div>
                <div class="produto-image">
                    <img src="assets/casas/@GetImageName(produtoEncomenda.IdProduto)" alt="@produtoEncomenda.IdProduto" />
                </div>
            </div>
        }
    </div>

    <div class="nav-buttons">
        <button @onclick="Voltar">VOLTAR</button>
        <button @onclick="MostrarModal">Enviar notificação</button>
        @if (estadoAtual == "Em produção" || (estadoAtual == "Em espera" && temCasasEmStock))
        {
            <button @onclick="EnviarEncomenda" disabled="@(!temCasasEmStock && estadoAtual != "Em produção")">
                Enviar Encomenda
            </button>
        }
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <span class="modal-icon">⚠️</span>
                <h3>Aviso</h3>
            </div>
            <p>Não é possível enviar notificações de momento. </p>
            <button class="modal-close" @onclick="FecharModal">Fechar</button>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private string dataPrevista;
    private string estadoAtual;
    private string clienteNome = "";
    private Dictionary<int, string> nomesProdutos = new();
    private List<Encomenda_tem_Produto> produtosEncomenda = new();
    private bool verificacaoConcluida = false;
    private bool podeProduzir = false;
    private bool temCasasEmStock = false;
    private string mensagemErro;
    private Dictionary<int, int> produtosProduziveis = new();
    private Dictionary<int, int> casasDisponiveis = new();
    private bool mostrarModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var encomendas = await OrderService.ListarTodasEncomendasAsync();
            var encomendaSelecionada = encomendas.FirstOrDefault(e => e.Numero == id);

            if (encomendaSelecionada != null)
            {
                var cliente = await OrderService.ObterClientePorIdAsync(encomendaSelecionada.IdCliente);
                clienteNome = cliente.Nome;
                dataPrevista = encomendaSelecionada.DataPrevEntrega.ToString("dd/MM/yyyy");
                estadoAtual = encomendaSelecionada.Estado;

                produtosEncomenda = (await OrderService.ListarProdutosPorEncomendaAsync(id))
                    .Select(p => new Encomenda_tem_Produto
                    {
                        Quantidade = p.Quantidade,
                        IdEncomenda = id,
                        IdProduto = p.Id
                    })
                    .ToList();

                foreach (var produto in produtosEncomenda)
                {
                    var nomeProduto = await OrderService.ObterNomeProdutoPorIdAsync(produto.IdProduto);
                    nomesProdutos[produto.IdProduto] = nomeProduto;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar encomenda: {ex.Message}");
        }
    }

    private async Task ConfirmarStockDisponivel()
    {
        // Primeiro, verificar se há casas prontas em stock
        casasDisponiveis.Clear();
        temCasasEmStock = true;

        foreach (var produto in produtosEncomenda)
        {
            var produtoStock = await StockService.GetProdutoPorIdAsync(produto.IdProduto);
            if (produtoStock != null && produtoStock.Quantidade >= produto.Quantidade)
            {
                casasDisponiveis[produto.IdProduto] = produtoStock.Quantidade;
            }
            else
            {
                temCasasEmStock = false;
                break;
            }
        }

        // Se não houver casas em stock, verificar materiais para produção
        if (!temCasasEmStock)
        {
            var resultado = await ProductionService.VerificarMateriaisParaProducaoAsync(id);
            podeProduzir = resultado.PodeProduzir;
            mensagemErro = resultado.Mensagem;
            produtosProduziveis = resultado.ProdutosProduziveis;
        }

        verificacaoConcluida = true;
        StateHasChanged();

        if (!temCasasEmStock && !podeProduzir)
        {
            mensagemErro = "Não há casas disponíveis em stock nem materiais suficientes para produção, é solicitado que o stock seja reposto.";
        }
    }

    private async Task ProduzirTodos()
    {
        if (podeProduzir)
        {
            // Tenta atualizar o stock de materiais + adicionar casas
            var resultadoStock = await StockService.AtualizarStockAposProducaoAsync(produtosEncomenda);

            // Se o método retornar algo diferente de "Stock atualizado com sucesso.", é porque deu erro
            if (resultadoStock != "Stock atualizado com sucesso.")
            {
                mensagemErro = resultadoStock;
                return;
            }

            // Caso tudo OK, encomenda passa para "Em produção"
            estadoAtual = "Em produção";
            await OrderService.AtualizarEstadoEncomendaAsync(id, "Em produção");
        }
        else
        {
            mensagemErro = "Não há materiais suficientes para iniciar a produção.";
        }

        StateHasChanged();
    }

    private async Task EnviarEncomenda()
    {
        if (estadoAtual != "Entregue")
        {
            if (temCasasEmStock || estadoAtual == "Em produção")
            {
                estadoAtual = "Entregue";
                var resultadoEncomenda = await OrderService.AtualizarEstadoEncomendaAsync(id, estadoAtual);
                if (resultadoEncomenda == "Estado da encomenda atualizado com sucesso!")
                {
                    // Se a encomenda foi atualizada com sucesso, tira as casas do stock
                    await StockService.AtualizarStockApósEnvioAsync(produtosEncomenda);

                    // Atualiza a data de entrega para a data atual
                    var dataAtual = DateTime.Now;
                    var sucesso = await OrderService.AtualizarDataEncomendaAsync(id, dataAtual);

                    if (sucesso)
                    {
                        dataPrevista = dataAtual.ToString("dd/MM/yyyy");
                        Console.WriteLine("Data de entrega atualizada para a data atual!");
                    }
                    else
                    {
                        Console.WriteLine("Erro ao atualizar a data de entrega.");
                    }
                }
            }
            else
            {
                mensagemErro = "Não é possível enviar a encomenda. Stock insuficiente.";
            }
        }

        StateHasChanged();
    }

    private void VerLinhaDeMontagem(int produtoId)
    {
        NavigationManager.NavigateTo($"/linhademontagem/{produtoId}/{id}");
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/encomendas");
    }

    private void MostrarModal()
    {
        mostrarModal = true;
    }

    private void FecharModal()
    {
        mostrarModal = false;
    }

    private string GetImageName(int idProduto)
    {
        return idProduto switch
        {
            1 => "casa1.png",
            2 => "casa2.png",
            3 => "casa3.png",
            _ => "default.png",
        };
    }
}

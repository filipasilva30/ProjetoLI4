@page "/linhademontagem/{produtoId:int}/{id:int}"
@using LI4.Data.Models
@using LI4.Data.Services
@inject LinhaMontagemService MontagemService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/LinhadeMontagem.css" />

<div class="menu-funcionario-container">
    <h1 class="titulo">Linha de Montagem - Produto #@produtoId</h1>

    <div class="container">
        <div class="left-panel">
            <p><b>Tempo estimado:</b> @tempoFormatado</p>
            <p><b>Descrição:</b> @descricao</p>
            <p><b>Etapa:</b> @(etapaAtual + 1) de @totalEtapas</p>
            <p><b>Estado:</b> @estado</p>

            <div class="progress-bar">
                <div class="progress-bar-fill" style="width:@progresso%"></div>
                <span>@progresso%</span>
            </div>

            <div class="nav-buttons">
                <button @onclick="EtapaAnterior" disabled="@(etapaAtual == 0)">Anterior</button>
                <button @onclick="ProximaEtapa" disabled="@(etapaAtual == totalEtapas - 1)">Próxima</button>
            </div>
        </div>

        <div class="right-panel">
            <img src="@imagemProduto" alt="Produto" class="produto-img" />
        </div>
    </div>

    <div style="text-align:center; margin-top: 20px;">
        <button @onclick="Voltar">Voltar</button>
    </div>
</div>

@code {
    [Parameter] public int produtoId { get; set; } 
    [Parameter] public int id { get; set; }

    private string descricao;
    private string tipoCasa;
    private string imagemProduto;
    private string estado;
    private int etapaAtual = 0;
    private int totalEtapas;
    private int progresso = 0;
    private string tempoFormatado;
    private List<LinhaMontagem> etapas;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            etapas = await MontagemService.ConsultarLinhaMontagemAsync(produtoId);

            tipoCasa = produtoId switch
            {
                1 => "s",
                2 => "m", 
                3 => "l", 
                _ => "default" 
            };

            if (etapas != null && etapas.Any())
            {
                totalEtapas = etapas.Count;
                AtualizarEtapa();
            }
            else
            {
                descricao = "Nenhuma etapa encontrada para este produto.";
                totalEtapas = 0;
            }
        }
        catch (Exception ex)
        {
            descricao = $"Erro ao carregar a linha de montagem: {ex.Message}";
        }
    }

    private void AtualizarEtapa()
    {
        if (etapas != null && etapas.Count > etapaAtual)
        {
            var etapaAtualObj = etapas[etapaAtual];
            descricao = etapaAtualObj.Descricao;
            tempoFormatado = $"{etapaAtualObj.Duracao.Hours} h {etapaAtualObj.Duracao.Minutes} min";
            progresso = (int)(((double)(etapaAtual + 1) / totalEtapas) * 100);

            // Determinar o estado da montagem
            if (etapaAtual == 0)
            {
                estado = "Em processamento";
            }
            else if (etapaAtual == totalEtapas - 1)
            {
                estado = "Finalizado";
            }
            else if (etapaAtual == totalEtapas - 2)
            {
                estado = "Quase finalizado";
            }
            else
            {
                estado = "Em processamento";
            }
            imagemProduto = $"/assets/lmontagem/passo{etapaAtual + 1}_{tipoCasa}.png";
        }
    }

    private void ProximaEtapa()
    {
        if (etapaAtual < totalEtapas - 1)
        {
            etapaAtual++;
            AtualizarEtapa();
        }
    }

    private void EtapaAnterior()
    {
        if (etapaAtual > 0)
        {
            etapaAtual--;
            AtualizarEtapa();
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/encomenda/{id}");
    }
}

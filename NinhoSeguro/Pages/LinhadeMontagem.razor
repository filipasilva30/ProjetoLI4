@page "/linhademontagem"
@using LI4.Data.Models
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/LinhadeMontagem.css" />

<div class="menu-funcionario-container">
    <h1 class="titulo">Linha de Montagem</h1>

    <div class="container">
        <div class="left-panel">
            <div class="select-box-container">
                <select class="select-box" @onchange="SelecionarProduto">
                    @foreach (var produto in produtos)
                    {
                        <option value="@produto">@produto</option>
                    }
                </select>
            </div>

            <p><b>Tempo estimado:</b> @tempoFormatado</p>
            <p><b>Descrição:</b> @descricao</p>
            <p><b>Etapa:</b> @(etapa + 1) de @totalEtapas</p>
            <p><b>Estado:</b> @estado</p>

            <div class="progress-bar">
                <div class="progress-bar-fill" style="width:@progresso%"></div>
                <span>@progresso%</span>
            </div>

            <div class="nav-buttons">
                <button @onclick="EtapaAnterior" disabled="@(etapa == 0)">Anterior</button>
                <button @onclick="ProximaEtapa" disabled="@(etapa == totalEtapas - 1)">Próxima</button>
            </div>
        </div>

        <div class="right-panel">
            <img src="@imagemProduto" alt="Produto" class="produto-img" />
        </div>
    </div>

    <div style="text-align:center; margin-top: 20px;">
        <button @onclick="Voltar">Voltar</button>
    </div>
</div>

@code {
    private string selectedProduct = "Produto #1";
    private int etapa = 0;
    private string estado;
    private string descricao;
    private int progresso = 0;
    private string tempoFormatado;
    private int totalEtapas;
    private string imagemProduto;

    private Dictionary<string, (string descricao, double tempoTotal, int etapas, string[] imagens)> produtosInfo =
        new Dictionary<string, (string, double, int, string[])>
        {
            { "Produto #1", ("Casa tamanho S cujos materiais utilizados são Madeira Pinho e Acácia", 1.0, 5, new string[] { "assets/lmontagem/passo1_s.png", "assets/lmontagem/passo2_s.png", "assets/lmontagem/passo3_s.png", "assets/lmontagem/passo4_s.png", "assets/lmontagem/passo5_s.png" }) },
            { "Produto #2", ("Casa tamanho M cujos materiais utilizados são Madeira Acácia e Wenge", 3.0, 7, new string[] { "assets/lmontagem/passo1_m.png", "assets/lmontagem/passo2_m.png", "assets/lmontagem/passo3_m.png", "assets/lmontagem/passo4_m.png", "assets/lmontagem/passo5_m.png", "assets/lmontagem/passo6_m.png", "assets/lmontagem/passo7_m.png" }) },
            { "Produto #3", ("Casa tamanho L cujos materiais utilizados são Madeira Acácia e Rosewood", 3.0, 13, new string[] { "assets/lmontagem/passo1_l.png", "assets/lmontagem/passo2_l.png", "assets/lmontagem/passo3_l.png", "assets/lmontagem/passo4_l.png", "assets/lmontagem/passo5_l.png", "assets/lmontagem/passo6_l.png", "assets/lmontagem/passo7_l.png", "assets/lmontagem/passo8_l.png", "assets/lmontagem/passo9_l.png", "assets/lmontagem/passo10_l.png", "assets/lmontagem/passo11_l.png", "assets/lmontagem/passo12_l.png", "assets/lmontagem/passo13_l.png" }) }
        };

    private List<string> produtos = new List<string>
    {
        "Produto #1",
        "Produto #2",
        "Produto #3"
    };

    protected override void OnInitialized()
    {
        AtualizarProduto();
    }

    private void SelecionarProduto(ChangeEventArgs e)
    {
        selectedProduct = e.Value?.ToString() ?? "Produto #1";
        etapa = 0;
        AtualizarProduto();
    }

    private void AtualizarProduto()
    {
        var produtoAtual = produtosInfo[selectedProduct];
        descricao = produtoAtual.descricao;
        totalEtapas = produtoAtual.etapas;
        double tempoRestante = produtoAtual.tempoTotal - (etapa * produtoAtual.tempoTotal / totalEtapas);
        progresso = (int)(((double)(etapa + 1) / totalEtapas) * 100);
        imagemProduto = produtoAtual.imagens[etapa];

        // Definição do estado conforme requisitos
        if (etapa == 0)
        {
            estado = "Em processamento";
        }
        else if (etapa == totalEtapas - 1)
        {
            estado = "Finalizado";
        }
        else if (etapa == totalEtapas - 2)
        {
            estado = "Quase finalizado";
        }
        else
        {
            estado = "Em processamento";
        }

        // Formatação do tempo estimado
        int horas = (int)tempoRestante;
        int minutos = (int)((tempoRestante - horas) * 60);

        if (horas > 0 && minutos > 0)
        {
            tempoFormatado = $"{horas} hora(s) e {minutos} minuto(s)";
        }
        else if (horas > 0)
        {
            tempoFormatado = $"{horas} hora(s)";
        }
        else
        {
            tempoFormatado = $"{minutos} minuto(s)";
        }
    }

    private void ProximaEtapa()
    {
        if (etapa < totalEtapas - 1)
        {
            etapa++;
            AtualizarProduto();
        }
    }

    private void EtapaAnterior()
    {
        if (etapa > 0)
        {
            etapa--;
            AtualizarProduto();
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/menufuncionario");
    }
}
